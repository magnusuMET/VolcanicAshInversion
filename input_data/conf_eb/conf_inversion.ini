##############################################################################
#                                                                            #
#    This file is part of PVAI - Python Volcanic Ash Inversion.              #
#                                                                            #
#    Copyright 2019, 2020 The Norwegian Meteorological Institute             #
#               Authors: Andr√© R. Brodtkorb <andreb@met.no>                  #
#                                                                            #
#    PVAI is free software: you can redistribute it and/or modify            #
#    it under the terms of the GNU General Public License as published by    #
#    the Free Software Foundation, either version 3 of the License, or       #
#    (at your option) any later version.                                     #
#                                                                            #
#    PVAI is distributed in the hope that it will be useful,                 #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of          #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           #
#    GNU General Public License for more details.                            #
#                                                                            #
#    You should have received a copy of the GNU General Public License       #
#    along with PVAI. If not, see <https://www.gnu.org/licenses/>.           #
#                                                                            #
##############################################################################


#Input - automatically set by run_inversion.sh
#matched_files = matched_files.csv
#a_priori_file = a_priori.json
#input_unscaled = system_matrix.npz
use_elevations = True #Use elevation information (if available)

#Output - automatically set by run_inversion
#output_dir = output_dir

#Pruning - remove parts of matrix that should not matter
#          Improves speed
prune = True

#rowsum_threshold = 1.e-5
#colsum_threshold = 1.e-5
rowsum_threshold = 0.0
colsum_threshold = 0.0
a_priori_threshold = 0.0

#Dimension and scaling arguments
#A priori should match emission in simulation
#a priori is given in kg for each emission level, and simulation emits 1 tg for each level
#output of inversion should then be in Tg emitted.
scale_a_priori = 1.0e-9 # a_priori in kg => Tg

#simulation output should match observations in dimension.
scale_emission = 1.0e-9 # emission in ug/m^2 => kg/m^2
scale_observation = 1.0e-3 # observation in g/m^2 => kg/m^2

#Solver arguments
#solver = direct         # Computes x = G\B
#solver = inverse        # Same as direct, but explicitly computes the inverse matrix
#solver = pseudo_inverse # Same as inverse, but uses Moore-Penrose pseudo inverse
#solver = lstsq          # Use least squares to solve original M x = y_0 system (no a priori)
#solver = lstsq2         # Uses least squares to solve the least squares system (should be close to direct solver)
#solver = nnls           # Non zero optimization to solve Mx=y (no a priori information) => sets max_iter to 1
#solver = nnls2          # Non zero optimization to solve Gx=B (uses a priori)
#solver = lsq_linear     # Linear least squares for Mx=y with a priori bounds
#solver = lsq_linear2    # Linear least squares for Gx=B with a priori bounds
smoothing_epsilon = 1.0e-1
a_priori_epsilon = 0.1
max_iter = 50
